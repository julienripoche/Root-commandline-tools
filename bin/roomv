#!/usr/bin/python

"""Commandline to move objects
from ROOT files to an other"""

from cmdLineUtils import *
from cmdLineHelps import *

##### Beginning of the main code #####

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description=ROOMV_HELP)
parser.add_argument("sourcePatternList", help=ARG_HELP, nargs='+')
parser.add_argument("destinationPattern", help=ARG_HELP)
parser.add_argument("-c","--compress", type=int, help=COMPRESS_HELP)
parser.add_argument("-r","--recreate", help=RECREATE_HELP, action="store_true")
args = parser.parse_args()

# Create a list of tuples that contain source ROOT file names
# and lists of path in these files
sourceList = \
    [tup for pattern in args.sourcePatternList \
     for tup in patternToFileNameAndPathSplitList(pattern)]

# Create a tuple that contain a destination ROOT file name
# and a path in this file
destinationList = \
    patternToFileNameAndPathSplitList( \
    args.destinationPattern,regexp=False)
destinationFileName,destinationPathSplitList = destinationList[0]
destinationPathSplit = destinationPathSplitList[0]

# Create a dictionnary with options
optDict = vars(args)
del optDict["sourcePatternList"]
del optDict["destinationPattern"]

# Creation of destination file (changing of the compression settings)
with stdoutRedirected(to=os.devnull), mergedStderrStdout():
    destinationFile = ROOT.TFile.Open(destinationFileName,"recreate") \
                      if optDict["recreate"] else \
                      ROOT.TFile.Open(destinationFileName,"update")
if optDict["compress"]:
    destinationFile.SetCompressionSettings(optDict["compress"])

# Loop on the root files
for sourceFileName, sourcePathSplitList in sourceList:
    with stdoutRedirected(to=os.devnull), mergedStderrStdout():
        sourceFile = ROOT.TFile.Open(sourceFileName,"update") if sourceFileName != destinationFileName else destinationFile
    for sourcePathSplit in sourcePathSplitList:
        copyRootObject(sourceFile,sourcePathSplit,destinationFile,destinationPathSplit)
        deleteRootObject(sourceFile,sourcePathSplit,{'force':True})
    if sourceFileName != destinationFileName:
        sourceFile.Close()
destinationFile.Close()

