#!/usr/bin/python

"""Commandline to move objects
from ROOT files to an other"""

from cmdLineUtils import *

##### Beginning of the main code #####

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="Move objects from ROOT files to an other")
parser.add_argument("sourcePatternList", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object", \
                    nargs='+')
parser.add_argument("destinationPattern", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object")
parser.add_argument("-c","--compress", type=int, help="change the compression settings of the destination file")
parser.add_argument("-r","--recreate", help="recreate the destination file", action="store_true")
args = parser.parse_args()

# Create a list of tuples that contain a source ROOT file name and a list of path in this file
sourceList = [tup for pattern in args.sourcePatternList for tup in patternToFileNameAndPathSplitList(pattern)]

# Create a destination ROOT file name and a path in this file
destinationList = patternToFileNameAndPathSplitList(args.destinationPattern,regexp=False)
destinationFileName,destinationPathSplitList = destinationList[0]
destinationPathSplit = destinationPathSplitList[0]

# Create a dictionnary with options
optDict = vars(args)
del optDict["sourcePatternList"]
del optDict["destinationPattern"]

# Creation of destination file (changing of the compression settings)
destinationFile = ROOT.TFile.Open(destinationFileName,"recreate") if optDict["recreate"] else ROOT.TFile.Open(destinationFileName,"update")
if optDict["compress"]: destinationFile.SetCompressionSettings(optDict["compress"])

# Loop on the root files
for sourceFileName, sourcePathSplitList in sourceList:
    sourceFile = ROOT.TFile.Open(sourceFileName,"update") if sourceFileName != destinationFileName else destinationFile
    for sourcePathSplit in sourcePathSplitList:
        copyRootObject(sourceFile,sourcePathSplit,destinationFile,destinationPathSplit)
        deleteRootObject(sourceFile,sourcePathSplit,{'force':True})
    if sourceFileName != destinationFileName:
        sourceFile.Close()
destinationFile.Close()

