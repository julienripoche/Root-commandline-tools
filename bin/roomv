#!/usr/bin/python

"""Commandline to move an object from a root file to an other root file"""

from pattern_to_tuple import *
from roocp_copy import *
from roorm_delete import *
import argparse
import ROOT

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="move an object from a root file to an other")
parser.add_argument("source_pattern_list", \
                    help="file path and object path in the file with the syntax : [file_path/]file[.root]:[object_path/]object", \
                    nargs='+')
parser.add_argument("dest_pattern", \
                    help="file path and object path in the file with the syntax : [file_path/]file[.root]:[object_path/]object")
args = parser.parse_args()

# Create a list of tuples that contain a source ROOT file name and a list of path in this file
source_list = []
for pattern in args.source_pattern_list:
    source_list.extend(pattern_to_tuple(pattern))

# Create a destination ROOT file name and a path in this file
dest_list = pattern_to_tuple(args.dest_pattern,regexp=False)
dest_name,dest_path_list = dest_list[0]
dest_path = dest_path_list[0]

# Create a dictionnary with options
opt_dict = vars(args)
del opt_dict["source_pattern_list"]
del opt_dict["dest_pattern"]

# Loop on the root files
dest_file = ROOT.TFile.Open(dest_name,"update")
for source_name, path_list in source_list:

    if source_name != dest_name:
        source_file = ROOT.TFile.Open(source_name,"update")
    else:
        source_file = dest_file

    for source_path in path_list:
        roocp_copy(source_file,source_path,dest_file,dest_path)
        roorm_delete(source_file,source_path)

    if source_name != dest_name:
        source_file.Close()
dest_file.Close()
