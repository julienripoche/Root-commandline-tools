#!/usr/bin/python

"""Commandline to copy subsets of trees from source
ROOT files to new trees on a destination ROOT file"""

from cmdLineUtils import *

# Definition of the function to copy subsets of trees
def copyTreeSubset(sourceFile,sourcePathSplit,destinationFile,destinationPathSplit,optDict):
    """
    Copy a subset of the tree from (sourceFile,sourcePathSplit)
    to (destinationFile,destinationPathSplit) according to options in optDict
    """
    changeDirectory(sourceFile,sourcePathSplit[:-1])
    bigTree = ROOT.gDirectory.Get(sourcePathSplit[-1])
    nbrEntries = bigTree.GetEntries()
    # changeDirectory for the small tree not to be memory-resident
    changeDirectory(destinationFile,destinationPathSplit)
    smallTree = bigTree.CloneTree(0)
    firstEvent = optDict["first"] if optDict["first"] != None else 0
    lastEvent = optDict["last"] if optDict["last"] != None and optDict["last"] < nbrEntries-1 else nbrEntries-1
    for i in range(nbrEntries):
        if i >= firstEvent and i <= lastEvent:
            bigTree.GetEntry(i)
            smallTree.Fill()
    smallTree.Write()

##### Beginning of the main code #####

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="Copy subsets of trees from source ROOT files to new trees on a destination ROOT file")
parser.add_argument("sourcePatternList", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object", \
                    nargs='+')
parser.add_argument("destinationPattern", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object")
parser.add_argument("-c","--compress", type=int, help="change the compression settings of the destination file")
parser.add_argument("-r","--recreate", help="recreate the destination file", action="store_true")
parser.add_argument("-f","--first", type=int, help="first event to copy")
parser.add_argument("-l","--last", type=int, help="last event to copy")
args = parser.parse_args()

# Create a list of tuples that contain a source ROOT file name and a list of path in this file
sourceList = [tup for pattern in args.sourcePatternList for tup in patternToFileNameAndPathSplitList(pattern)]

# Create a destination ROOT file name and a path in this file
destinationList = patternToFileNameAndPathSplitList(args.destinationPattern,regexp=False)
destinationFileName,destinationPathSplitList = destinationList[0]
destinationPathSplit = destinationPathSplitList[0]

# Create a dictionnary with options
optDict = vars(args)
del optDict["sourcePatternList"]
del optDict["destinationPattern"]

# Creation of destination file (changing of the compression settings)
destinationFile = ROOT.TFile.Open(destinationFileName,"recreate") if optDict["recreate"] else ROOT.TFile.Open(destinationFileName,"update")
if optDict["compress"]: destinationFile.SetCompressionSettings(optDict["compress"])

# Loop on the root files
for sourceFileName, sourcePathSplitList in sourceList:
    sourceFile = ROOT.TFile.Open(sourceFileName) if sourceFileName != destinationFileName else destinationFile
    for sourcePathSplit in sourcePathSplitList:
        if isTree((sourceFile,sourcePathSplit)):
            copyTreeSubset(sourceFile,sourcePathSplit,destinationFile,destinationPathSplit,optDict)
    if sourceFileName != destinationFileName:
        sourceFile.Close()
destinationFile.Close()
