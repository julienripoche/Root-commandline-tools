#!/usr/bin/python

"""Commandline to print root contents on ps,pdf or png,gif.. files"""

from pattern_to_tuple import *
from utils import *
import argparse
import os
import ROOT

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="print ROOT file contents on ps,pdf or png,gif.. files")
parser.add_argument("-d", "--directory", help="put files in a subdirectory named 'directory'")
parser.add_argument("-o", "--output", help="merge files in a file named 'output' (only for ps and pdf)")
parser.add_argument("-e", "--extension", help="extension of the output (ex: pdf, png)")
parser.add_argument("pattern_list", \
                    help="file path and object path in the ROOT file with the syntax : [file_path/]file.root:[object_path/]object", \
                    nargs='+')
args = parser.parse_args()

# Create a list of tuples that contain a ROOT file name and a list of path in this file
file_list = []
for pattern in args.pattern_list:
    file_list.extend(pattern_to_tuple(pattern))

# Create a dictionnary with options
opt_dict = vars(args)
del opt_dict["pattern_list"]

# Initialize the canvas
ROOT.gErrorIgnoreLevel = 9999
ROOT.gROOT.SetBatch()
canvas = ROOT.TCanvas("canvas")

# Options stuff
if not opt_dict["extension"]:
    opt_dict["extension"] = "ps"
if opt_dict["directory"]:
    if not os.path.isdir(os.path.join(os.getcwd(),opt_dict["directory"])):
        os.system("mkdir {0}".format(opt_dict["directory"]))
if opt_dict["output"]:
    if opt_dict["extension"] in ['ps','pdf']:
        output_name = opt_dict["output"]
        if opt_dict["directory"]:
            output_name = opt_dict["directory"] + "/" + output_name
        canvas.Print(output_name+"[",opt_dict["extension"])
    else:
        print("Can't merge pictures, only postscript or pdf files")
        opt_dict["output"] = ""

# Loop on the root files
for file_name, path_list in file_list:
    root_file = ROOT.TFile.Open(file_name)

    # Fill the key list (almost the same as in rools)
    obj_list,dir_list = type_selector(root_file,path_list)
    key_list = [get_key(root_file,path) for path in obj_list]
    key_list.sort()
    dir_list.sort()
    for path in dir_list:
        key_list.extend(get_key_list(root_file,path))
    key_list = [key for key in key_list if not is_directory(key)]

    # Loop
    for key in key_list:
        if not opt_dict["output"]:
            output_name = key.GetName() + "." +opt_dict["extension"]
            if opt_dict["directory"]:
                output_name = opt_dict["directory"] + "/" + output_name
        obj = key.ReadObj()
        obj.Draw()
        if opt_dict["output"] or opt_dict["extension"] == 'pdf':
            obj_title = "Title:"+key.GetClassName()+" : "+key.GetTitle()
            canvas.Print(output_name,obj_title)
        else:
            canvas.Print(output_name,opt_dict["extension"])

    root_file.Close()

# Ending
if opt_dict["output"]:
    canvas.Print(output_name+"]",obj_title)
