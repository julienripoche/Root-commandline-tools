#!/usr/bin/python

"""rtrthrth"""

from pattern_to_tuple import *
from dir_selector import *
import argparse
import os
import ROOT

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="list ROOT file contents")
parser.add_argument("-o", help="place output in file file.pdf", action="store_true")
parser.add_argument("pattern_list", \
                    help="file path and object path in the ROOT file with the syntax : [file_path/]file.root:[object_path/]object", \
                    nargs='+')
args = parser.parse_args()

# Create a list of tuples that contain a ROOT file name and a list of path in this file
file_list = []
for pattern in args.pattern_list:
    file_list.extend(pattern_to_tuple(pattern))

# Initialize the canvas
ROOT.gErrorIgnoreLevel = 9999
ROOT.gROOT.SetBatch()
canvas = ROOT.TCanvas("canvas")

# Loop on the root files
for file_name, path_list in file_list:
    root_file = ROOT.TFile.Open(file_name)

    # Name of the pdf file
    output_name = root_file.GetName()
    if output_name[-5:]==".root":
        output_name = output_name[:-5]+".pdf"
    else:
        output_name += ".pdf"

    obj_list,dir_list = dir_selector(root_file,path_list)
    key_list = [get_key(root_file,path) for path in obj_list]

    #for path in dir_list:
    #    key_list = get_key_list(root_file,path)

    for i,key in enumerate(key_list):
    
        # Read the object and print in the canvas
        obj = key.ReadObj()
        obj.Draw()
        obj_title = "Title:"+key.GetClassName()+" : "+key.GetTitle()

        if len(key_list) > 1 and i == 0:
            canvas.Print(output_name+"(",obj_title)
        elif len(key_list) > 1 and i == len(key_list) - 1:
            canvas.Print(output_name+")",obj_title)
        else:
            canvas.Print(output_name,obj_title)

    root_file.Close()
