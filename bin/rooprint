#!/usr/bin/python

"""Commandline to print ROOT files contents on ps,pdf or png,gif.. files"""

from cmdLineUtils import *

##### Beginning of the main code #####

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="Print ROOT files contents on ps,pdf or png,gif.. files")
parser.add_argument("sourcePatternList", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object", \
                    nargs='+')
parser.add_argument("-d", "--directory", help="put output files in a subdirectory named 'directory'")
parser.add_argument("-m", "--merge", help="merge files in a file named 'merge' (only for ps and pdf)")
parser.add_argument("-e", "--extension", help="extension of the output (ex: pdf, png)")
args = parser.parse_args()

# Create a list of tuples that contain a source ROOT file name and a list of path in this file
sourceList = [tup for pattern in args.sourcePatternList for tup in patternToFileNameAndPathSplitList(pattern)]

# Create a dictionnary with options
optDict = vars(args)
del optDict["sourcePatternList"]

# Initialize the canvas
ROOT.gErrorIgnoreLevel = 9999
ROOT.gROOT.SetBatch()
canvas = ROOT.TCanvas("canvas")

# Options stuff
if not optDict["extension"] and optDict["merge"]:
    fileName = optDict["merge"]
    extension = fileName.split(".")[-1]
    if extension in ["ps","Portrait","Landscape","eps","Preview","pdf","svg","tex","gif","xpm","png","jpg"]:
        optDict["extension"] = extension
if not optDict["extension"]:
    optDict["extension"] = "pdf"
if optDict["directory"]:
    if not os.path.isdir(os.path.join(os.getcwd(),optDict["directory"])):
        os.system("mkdir {0}".format(optDict["directory"]))
if optDict["merge"]:
    if optDict["extension"] in ['ps','pdf']:
        outputFileName = optDict["merge"]
        if optDict["directory"]:
           outputFileName = optDict["directory"] + "/" + outputFileName
        canvas.Print(outputFileName+"[",optDict["extension"])
    else:
        print("Can't merge pictures, only postscript or pdf files")
        optDict["output"] = ""

# Loop on the root files
for fileName, pathSplitList in sourceList:
    rootFile = ROOT.TFile.Open(fileName)

    # Fill the key list (almost the same as in rools)
    objList,dirList = typeSelector(rootFile,pathSplitList)
    keyList = [getKey(rootFile,pathSplit) for pathSplit in objList]
    keyList.sort()
    dirList.sort()
    for pathSplit in dirList:
        keyList.extend(getKeyList(rootFile,pathSplit))
    keyList = [key for key in keyList if not isDirectory(key)]

    # Loop
    for key in keyList:
        if isTree(key):
            obj = key.ReadObj()
            for branch in obj.GetListOfBranches():
                if not optDict["merge"]:
                    outputFileName = branch.GetName() + "." +optDict["extension"]
                    if optDict["directory"]:
                        outputFileName = optDict["directory"] + "/" + outputFileName # use os.path ...
                obj.Draw(branch.GetName())
                if optDict["merge"] or optDict["extension"] == 'pdf':
                    objTitle = "Title:"+branch.GetName()+" : "+branch.GetTitle()
                    canvas.Print(outputFileName,objTitle)
                else:
                    canvas.Print(outputFileName,optDict["extension"])
        else:
            if not optDict["merge"]:
                outputFileName = key.GetName() + "." +optDict["extension"]
                if optDict["directory"]:
                    outputFileName = optDict["directory"] + "/" + outputFileName # use os.path ...
            obj = key.ReadObj()
            obj.Draw()
            if optDict["merge"] or optDict["extension"] == 'pdf':
                objTitle = "Title:"+key.GetClassName()+" : "+key.GetTitle()
                canvas.Print(outputFileName,objTitle)
            else:
                canvas.Print(outputFileName,optDict["extension"])

    rootFile.Close()

# Ending
if optDict["merge"]:
    canvas.Print(outputFileName+"]",objTitle)
