#!/usr/bin/python

"""commandline to print some informations about the contents of a root file"""

from regexp.pattern_to_dict import *
from viewing.pprint_long_ls import *
from viewing.pprint_ls import *
from utils.is_directory import *
import argparse
import os
import ROOT

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="list ROOT file contents")
parser.add_argument("-l", help="use a long listing format", action="store_true")
parser.add_argument("pattern_list", \
                    help="file path and object path in the ROOT file with the syntax : [file_path/]file.root:[object_path/]object", \
                    nargs='+')
args = parser.parse_args()

# Create a dictionnary with ROOT file name as key
# and which contains list of paths
file_dict = pattern_to_dict(args.pattern_list)

# Create a dictionnary with options
opt_dict = vars(args)
del opt_dict["pattern_list"]

# Loop on the root files
first_round = True
for file_name, path_list in file_dict.items():
    root_file = ROOT.TFile.Open(file_name)

    # Fill the key list
    key_list = []
    dir_dict = {}
    if file_dict[file_name] != []:
        for path in path_list:
            chg_dir(root_file,path[:-1])
            if is_directory(ROOT.gDirectory.GetKey(path[-1])):
                chg_dir(root_file,path)
                dir_dict["/".join(path)] = ROOT.gDirectory.GetListOfKeys()
            else:
                key_list.append(ROOT.gDirectory.GetKey(path[-1]))
    else:
        key_list.extend([key for key in ROOT.gDirectory.GetListOfKeys()])
    
    # Beginning of the print information
    if len(file_dict) > 1 and not first_round: # Separator if there is many Files
        print("")
    else:
        first_round = False
    if len(file_dict) > 1: # Paths of file and object
	print("{0} :".format(file_name))

    # Print the informations
    if opt_dict['l']:
        pprint_long_ls(key_list)
    else:
        # Don't forget color and bold, make a different function
        name_list = [key.GetName() for key in key_list]
        pprint_ls(name_list)

    for path, key_list in dir_dict.items():
        # Beginning of the print information
        if len(file_dict) > 1 or len(dir_dict) > 1:
            print("") # Separator if there is many Files
            print("{0} :".format(path)) # Paths of file and object

        # Print the informations
        if opt_dict['l']:
            pprint_long_ls(key_list)
        else:
            # Don't forget color and bold, make a different function
            name_list = [key.GetName() for key in key_list]
            pprint_ls(name_list)  

    root_file.Close()
