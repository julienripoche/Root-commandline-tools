#!/usr/bin/python

"""Commandline to dump ROOT files contents to terminal"""

from cmdLineUtils import *

def colorInBold(string):
    """Color the string in bold"""
    if sys.stdout.isatty(): # if the output is the terminal
        ansiBold = "\x1B[1m"
        ansiEnd = "\x1B[0m"
        return ansiBold+string+ansiEnd
    else:
        return string

def colorInBlue(string):
    """Color the string in blue"""
    if sys.stdout.isatty(): # if the output is the terminal
        ansiBlue = "\x1B[34m"
        ansiEnd = "\x1B[0m"
        return ansiBlue+string+ansiEnd
    else:
        return string

# Template for tree columns print
treeTemplate = "{0:{nameWidth}}"+"{1:{titleWidth}}{2:{memoryWidth}}"

def recursifTreePrinter(tree,indentLevel):
    # Width informations
    if len(tree.GetListOfBranches()) > 0:
        maxCharName = max([len(branch.GetName()) for branch in tree.GetListOfBranches()])
        maxCharTitle = max([len(branch.GetTitle()) for branch in tree.GetListOfBranches()])
        #maxCharMemory = max([len(str(branch.GetTotBytes())) for branch in tree.GetListOfBranches()])
        dic = {"nameWidth":maxCharName+2,"titleWidth":maxCharTitle+4,"memoryWidth":1}

    # Print loop
    for branch in tree.GetListOfBranches():
        # Data
        rec = [branch.GetName(), \
               "\""+branch.GetTitle()+"\"", \
               str(branch.GetTotBytes())]
         # Print
        print "  "*indentLevel + treeTemplate.format(*rec,**dic)
        # if indentLevel < optDict["deeper_level"]: to keep in mind
        recursifTreePrinter(branch,indentLevel+1)

#def pprint_tree_ls(keyList):
#    """Function to print contents of trees"""
#    for key in keyList:
#        if isTree(key):
#            tree = key.ReadObj()
#            rec = [tree.GetName(), \
#               "\""+tree.GetTitle()+"\"", \
#               str(tree.GetTotBytes())]
#            dic = {"name_width":len(tree.GetName())+2,"title_width":len(tree.GetTitle())+4,"memory_width":1}
#            print tree_template.format(*rec,**dic)
#            recursif(tree,1)

def prepareTime(time):
    """ Function to be sure of the format of time
    (174512 for 17h 45m 12s and 094023 for 09h 40m 23s)"""
    time = str(time)
    time = '000000'+time
    time = time[len(time)-6:]
    return time

def roolsPrintLongLs(keyList,optDict):
    """Function to print a list of Tkey in columns,
    classname, datetime, name and title"""

    # Template for columns print
    template = colorInBold("{0:{classWidth}}")+"{1:{timeWidth}}{2:{nameWidth}}{3:{titleWidth}}"

    # Width informations
    if len(keyList) > 0:
        maxCharClass = max([len(key.GetClassName()) for key in keyList])
        maxCharTime = 12
        maxCharName = max([len(key.GetName()) for key in keyList])
        #maxCharTitle = max([len(key.GetTitle()) for key in keyList])
        dic = {"classWidth":maxCharClass+2,"timeWidth":maxCharTime+2,"nameWidth":maxCharName+2,"titleWidth":1}

    date =ROOT.Long(0)  
    month={1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}
    for key in keyList:
        time =ROOT.Long(0)
        key.GetDatime().GetDateTime(key.GetDatime().Get(),date,time)
        time = prepareTime(time)
        rec = [key.GetClassName(), \
               month[int(str(date)[4:6])]+" " +str(date)[6:]+" "+time[:2]+":"+time[2:4], \
               key.GetName(), \
               "\""+key.GetTitle()+"\""]
        print template.format(*rec,**dic)
        if optDict['t'] and isTree(key):
            tree = key.ReadObj()
            recursifTreePrinter(tree,1)

def roolsPrintLs(input_list):
    """Print list of strings in columns"""
    # This code is adaptated from the pprint_list function here : http://stackoverflow.com/questions/25026556/output-list-like-ls
    # Thanks hawkjo !!
    if len(input_list) == 0:
        return
    (term_width, term_height) =  getTerminalSize()
    min_chars_between = 2
    min_element_width = min( len(x) for x in input_list ) + min_chars_between
    max_element_width = max( len(x) for x in input_list ) + min_chars_between
    if max_element_width >= term_width:
        ncol = 1
        col_widths = [1]
    else:
        # Start with max possible number of columns and reduce until it fits
        ncol = min( len(input_list), term_width / min_element_width  )
        while True:
            col_widths = [ max( len(x) + min_chars_between \
                                for j, x in enumerate( input_list ) if j % ncol == i ) \
                                for i in range(ncol) ]
            if sum( col_widths ) <= term_width: break
            else: ncol -= 1
    for i, x in enumerate(input_list):
        if i != len(input_list)-1:
            sys.stdout.write(x.ljust(col_widths[i%ncol]))
        else:
            # Don't add spaces after the last print
            sys.stdout.write(x)
        if i == len(input_list) - 1 or (i+1) % ncol == 0:
            sys.stdout.write('\n')

def roolsPrint(keyList,optDict):
    """Print the informations given by keyList with a rools
    style choosen with optDict"""
    if optDict['l']:
        roolsPrintLongLs(keyList,optDict)
    else:
        # Don't forget color and bold, make a different function
        objNameList = [key.GetName() for key in keyList]
        roolsPrintLs(objNameList)

##### Beginning of the main code #####

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="Dump ROOT files contents to terminal")
parser.add_argument("sourcePatternList", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object", \
                    nargs='+')
parser.add_argument("-l", help="use a long listing format", action="store_true")
parser.add_argument("-t", help="tree recursive print (with -l option)", action="store_true")
args = parser.parse_args()

# Create a list of tuples that contain a source ROOT file name and a list of path in this file
sourceList = [tup for pattern in args.sourcePatternList for tup in patternToFileNameAndPathSplitList(pattern)]

# Create a dictionnary with options
optDict = vars(args)
del optDict["sourcePatternList"]

# Loop on the ROOT files
first_round_file = True
not_dir_objects_first = False
for fileName, pathSplitList in sourceList:
    rootFile = ROOT.TFile.Open(fileName)
    objList,dirList = typeSelector(rootFile,pathSplitList)
    keyList = [getKey(rootFile,pathSplit) for pathSplit in objList]
    keyList.sort()
    dirList.sort()

    # Heading
    if len(sourceList) > 1 and not first_round_file:
        print("") # Separator if there is many File
    else:
        first_round_file = False
    if len(sourceList) > 1: # Paths of file and object
	print("{0} :".format(fileName))
    if keyList != []:
        not_dir_objects_first = True

    # Print with the rools style
    roolsPrint(keyList,optDict)

    first_round_directory = True
    for pathSplit in dirList:
        keyList = getKeyList(rootFile,pathSplit)
        keyList.sort()
        
        # Heading
        if (len(pathSplitList) > 1 and not first_round_directory) or not_dir_objects_first:
            print("") # Separator if there is many Files
        not_dir_objects_first = False
        first_round_directory = False
        if len(pathSplitList) > 1: # Paths of file and object
            print("{0} :".format("/".join(pathSplit)))

        # Print with the rools style
        roolsPrint(keyList,optDict)
            
    rootFile.Close()
