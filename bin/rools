#!/usr/bin/python

"""Commandline to dump root contents to terminal"""

from redirect_escape_characters import *

with stdout_redirected(to=os.devnull), merged_stderr_stdout():
    import argparse
    import ROOT
    from pattern_to_tuple import *
    from rools_print import *
    from utils import *

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="list ROOT file contents")
parser.add_argument("-l", help="use a long listing format", action="store_true")
parser.add_argument("pattern_list", \
                    help="file path and object path in the ROOT file with the syntax : [file_path/]file.root:[object_path/]object", \
                    nargs='+')
args = parser.parse_args()

# Create a list of tuples that contain a ROOT file name and a list of path in this file
file_list = []
for pattern in args.pattern_list:
    file_list.extend(pattern_to_tuple(pattern))

# Create a dictionnary with options
opt_dict = vars(args)
del opt_dict["pattern_list"]

# Loop on the ROOT files
first_round_file = True
not_dir_objects_first = False
for file_name, path_list in file_list:
    root_file = ROOT.TFile.Open(file_name)
    obj_list,dir_list = dir_selector(root_file,path_list)
    key_list = [get_key(root_file,path) for path in obj_list]
    key_list.sort()
    dir_list.sort()

    # Heading
    if len(file_list) > 1 and not first_round_file:
        print("") # Separator if there is many File
    else:
        first_round_file = False
    if len(file_list) > 1: # Paths of file and object
	print("{0} :".format(file_name))
    if key_list != []:
        not_dir_objects_first = True

    # Print with the rools style
    rools_print(key_list,opt_dict)

    first_round_directory = True
    for path in dir_list:
        key_list = get_key_list(root_file,path)
        key_list.sort()
        
        # Heading
        if (len(path_list) > 1 and not first_round_directory) or not_dir_objects_first:
            print("") # Separator if there is many Files
        not_dir_objects_first = False
        first_round_directory = False
        if len(path_list) > 1: # Paths of file and object
            print("{0} :".format("/".join(path)))

        # Print with the rools style
        rools_print(key_list,opt_dict)
            
    root_file.Close()
