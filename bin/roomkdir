#!/usr/bin/python

"""Commandline to add directories in ROOT files"""

from cmdLineUtils import *

# Definition of the function to add a directory in a ROOT file
def createDirectory(rootFile,pathSplit):
    """
    Add a directory named 'pathSplit[-1]'
    in (rootFile,pathSplit[:-1])
    """
    changeDirectory(rootFile,pathSplit[:-1])
    ROOT.gDirectory.mkdir(pathSplit[-1])

# Definition of the function to recursively add directories in a ROOT file
def createDirectories(rootFile,pathSplit,optDict):
    """
    Same behaviour as createDirectory but allows the possibility
    to build an entire path recursively with opt_dict["parents"]
    """
    if not optDict["parents"]:
        # if pathSplit == [], an empty file is created
        if pathSplit != []:
            createDirectory(rootFile,pathSplit)
    else:
        for i in range(len(pathSplit)):
            currentPathSplit = pathSplit[:i+1]
            objNameList = [key.GetName() for key in \
                         getKeyList(rootFile,currentPathSplit[:-1])]
            if not currentPathSplit[-1] in objNameList:
                createDirectory(rootFile,currentPathSplit)

##### Beginning of the main code #####

# Collect arguments with the module argparse
parser = argparse.ArgumentParser(description="Add directories in a ROOT files")
parser.add_argument("sourcePatternList", \
                    help="file path and object path in the file : [filePath/]file[.root]:[objectPath/]object", \
                    nargs='+')
parser.add_argument("-p", "--parents", help="no error if existing, make parent directories as needed", action="store_true")
args = parser.parse_args()

# Create a list of tuples that contain a source ROOT file name and a list of path in this file
sourceList = [tup for pattern in args.sourcePatternList for tup in patternToFileNameAndPathSplitList(pattern,regexp=False)]

# Create a dictionnary with options
optDict = vars(args)
del optDict["sourcePatternList"]

# Loop on the ROOT files
for fileName, pathSplitList in sourceList:
    rootFile = ROOT.TFile.Open(fileName,"update")
    for pathSplit in pathSplitList:
        createDirectories(rootFile,pathSplit,optDict)
    rootFile.Close()
